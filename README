==========
SimpleIDML
==========

What is SimpleIDML ?
====================

SimpleIDML is a Python library to manipulate Adobe® InDesign® IDML file. The main purpose being the ability to 
compose IDML files together and produce complex documents from simple pieces and to separate the data from the structure.

The philosophy behind SimpleIDML is to keep separated the content and the structure and to use XML files to feed your documents.
Keeping this isolation is important to ease the debugging and to keep track of what is going on.
You can use the same XML file to build your IDML document and to fill it, but this is a second step done in InDesign through the
XML Import function.

I urge you to take a look in the *regressiontests* directory for real-world (well, *my* real-world) examples.


What are IDML files ?
=====================

IDML (*InDesign Markup Language*) files are a Zip archives (Adobe calls them packages) storing essentially XML files. Adobe 
made a great step forward with this functionnality because those files can completely express the content of the native (binary)
documents.
This is a small revolution in the print world when it comes to automatically process files in both ways from templates and database
(Round-trip) because everybody speak XML. No more awkward *AppleScript* to construct a document.


What does SimpleIDML do ?
=========================

Package exploration
-------------------

You can discover the structure of your IDML files::


    >>> from simple_idml import idml
    >>> my_idml_package = idml.IDMLPackage("/path/to/my_main_document.idml")
    >>> my_idml_package.spreads
    [u'Spreads/Spread_ub6.xml', u'Spreads/Spread_ubc.xml', u'Spreads/Spread_uc3.xml']
    >>> my_idml_package.stories
    [u'Stories/Story_u139.xml', u'Stories/Story_u11b.xml', u'Stories/Story_u102.xml', u'Stories/Story_ue4.xml']
    

Some attributes are *lxml.etree* Elements or Documents::

    >>> my_package.font_families
    [<Element FontFamily at 0x1010048c0>, <Element FontFamily at 0x101004a50>, <Element FontFamily at 0x101004aa0>,
        <Element FontFamily at 0x101004af0>]
    >>> [e.get("Name") for e in my_package.font_families]
    ['Minion Pro', 'Myriad Pro', 'Kozuka Mincho Pro', 'Vollkorn']

    >>> my_package.XMLStructure.dom
    <Element Root at 0x101004910>
    >>> from lxml import etree
    >>> print etree.tostring(my_package.XMLStructure.dom, pretty_print=True)
    <Root Self="di2">
      <article XMLContent="u102" Self="di2i3">
        <Story XMLContent="ue4" Self="di2i3i1">
          <title Self="di2i3i1i1"/>
          <subtitle Self="di2i3i1i2"/>
        </Story>
        <content XMLContent="u11b" Self="di2i3i2"/>
        <illustration XMLContent="u135" Self="di2i3i3"/>
        <description XMLContent="u139" Self="di2i3i4"/>
      </article>
      <article XMLContent="udb" Self="di2i4"/>
      <article XMLContent="udd" Self="di2i5"/>
      <advertise XMLContent="udf" Self="di2i6"/>
    </Root>
    

*XMLStructure* attribute is a representation of the XML Structure of your InDesign XML-ready document (The one you want 
to use to populate the content with data from an external XML file having the same structure).


Build package
-------------

There is a convenient script to create a IDML package from a flat directory called *simpleidml_create_package_from_dir.py*
which should be in your PATH.


Compose document
----------------


Insert elements
'''''''''''''''

Using the XML Structure you can ask SimpleIDML to insert into a document at a XML tag the content of another XML tag from
another document. The tag paths are expressed using XPath_ syntax. Note that you should always make a copy of your idml 
files before altering them with *shutil.copy2(src, dst)* for instance and prefix your document before using *insert_idml()*
to avoid reference collisions.

::


    >>> from simple_idml import idml
    >>> idml_main = idml.IDMLPackage("/path/to/my_main_document.idml")
    >>> idml_module = idml.IDMLPackage("/path/to/my_small_document.idml")

    >>> idml_main = idml_main.prefix("main")
    >>> idml_article = idml_module.prefix("article")

    >>> idml_main = idml_main.insert_idml(idml_article, at="/Root/article[3]", only="/Root/module[1]")
    >>> idml_main.stories
    ['Stories/Story_article1u188.xml', 'Stories/Story_article1u19f.xml', 'Stories/Story_article1u1db.xml', 
     'Stories/Story_mainu102.xml', 'Stories/Story_mainu11b.xml', 'Stories/Story_mainu139.xml', 'Stories/Story_mainue4.xml']


    >>> print etree.tostring(idml_main.XMLStructure.dom, pretty_print=True)
    <Root Self="maindi2">
      <article XMLContent="mainu102" Self="maindi2i3">
        <Story XMLContent="mainue4" Self="maindi2i3i1">
          <title Self="maindi2i3i1i1"/>
          <subtitle Self="maindi2i3i1i2"/>
        </Story>
        <content XMLContent="mainu11b" Self="maindi2i3i2"/>
        <illustration XMLContent="mainu135" Self="maindi2i3i3"/>
        <description XMLContent="mainu139" Self="maindi2i3i4"/>
      </article>
      <article XMLContent="mainudb" Self="maindi2i4"/>
      <article Self="maindi2i5"/>
      <module XMLContent="article1u1db" Self="article1di3i12">
        <main_picture XMLContent="article1u182" Self="article1di3i12i1"/>
        <headline XMLContent="article1u188" Self="article1di3i12i2"/>
        <Story XMLContent="article1u19f" Self="article1di3i12i3">
          <article Self="article1di3i12i3i2"/>
          <informations Self="article1di3i12i3i1"/>
        </Story>
      </module>
      <advertise XMLContent="mainudf" Self="maindi2i6"/>
    </Root>



Add pages
'''''''''

*Still in progress*


Installation
============

::
    
    python setup.py build
    sudo python setup.py install

Dependencies
------------

- Python >= 2.6
- lxml


.. _XPath: http://en.wikipedia.org/wiki/XPath
